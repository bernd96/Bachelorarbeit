#vor evtl. verbindungen zum auto
export ROS_HOSTNAME=own ip
export ROS_MASTER_URI=http://carIP:11311
export ROS_IP=own ip

#ssh verbindung zum auto
ssh root@192.168.43.103
pw: elfmeter
#Roscore beenden
pkill ros
#roscore neustart
cd /opt/ros/model_car3.1/
./autostart.sh


#set camera helligkeit (video0==usb_cam?)
v4l2-ctl --device=/dev/usb_cam --set-ctrl exposure_auto=1
v4l2-ctl --device=/dev/video0 --set-ctrl exposure_absolute=1

#callback fkt seltener aufrufen
	void callback_reconfigure(fub_atlas_road_follower::AtlasRoadFollowerConfig &config, uint32_t level) {

		// create / update up the timer
		ros::Duration timerPeriod = ros::Duration(1.0 / config.execution_frequency);
		if (not mTimer.isValid()) {
			mTimer = getMTNodeHandle().createTimer(timerPeriod, &AtlasRoadFollower::callbackTimer, this);
		} else {
			mTimer.setPeriod(timerPeriod);
		}

#aus odom: yaw in quaternion, geschwindigkeitsabh√§ngigkeiten
    vth =v * sin(beta)/lr ; //* dt;
    // x+=delta_x;
    // y+=delta_y;
    // th += vth * dt;

    //a quaternion created from yaw
    geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);

    //first, we'll publish the transform over tf
    geometry_msgs::TransformStamped odom_trans;
    odom_trans.header.stamp = current_time;
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";
    odom_trans.transform.translation.x = x;
    odom_trans.transform.translation.y = y;
    odom_trans.transform.translation.z = 0.0;
    odom_trans.transform.rotation = odom_quat;

    //send the transform
    odom_broadcaster.sendTransform(odom_trans);

    //next, we'll publish the odometry message over ROS
    nav_msgs::Odometry odom;
    odom.header.stamp = current_time;
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = v * cos(th+beta);
    odom.twist.twist.linear.y = v * sin(th+beta);
    odom.twist.twist.angular.z=vth;

    //publish the message
    odom_pub.publish(odom);

    last_time = current_time;
    r.sleep();
